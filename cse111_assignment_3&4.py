# -*- coding: utf-8 -*-
"""CSE111_Assignment_3&4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gzBe7Yylolt6c4HhWTO2YYYCR4pbfgXU
"""

var='Hello this is Tasrif Coding'
print(var)

#task-1:
#Class Code:
class Patient:
    def __init__(self,name,age,weight,height):
        self.name=name
        self.age=age
        self.weight=weight
        self.height=height
    def printDetails(self):
        BMI=self.weight/(self.height/100)**2
        print('Name: ',self.name)
        print('Age: ',self.age)
        print('Weight: ',self.weight)
        print('Height: ',self.height)
        print('BMI: ',BMI)


#Driver Code:
p1 = Patient("A", 55, 63.0, 158.0)
p1.printDetails()
print("====================")
p2 = Patient("B", 53, 61.0, 149.0)
p2.printDetails()

#task-2:
class Shape:
    def __init__(self,name,p1,p2):
        self.name=name
        self.param1=p1
        self.param2=p2
        
    def area(self):
        if self.name=='Triangle' or self.name=='Rhombus':
            print('Area=', 0.5*self.param1*self.param2)
        elif self.name=='Sqaure' or self.name=='Rectangle':
            print('Area: ',self.param1*self.param2)
        else:
            print('Shape Unknown')

triangle = Shape("Triangle",10,25)
triangle.area()
print("==========================")
square = Shape("Square",10,10)
square.area()
print("==========================")
rhombus = Shape("Rhombus",18,25)
rhombus.area()
print("==========================")
rectangle = Shape("Rectangle",15,30)
rectangle.area()
print("==========================")
trapezium = Shape("Trapezium",15,30)
trapezium.area()

#task-3:
class Calculator:
    def __init__(self):
        print('Calculator is ready!')
    def calculate(self,val1,val2,sign):
        self.val1=val1
        self.val2=val2
        self.sign=sign
        if self.sign=='+':
            self.val=self.val1+self.val2
            return self.val
            # print(self.val1,self.sign,self.val2, '=',val)
        elif self.sign=='-':
            self.val=self.val1-self.val2
            return self.val
        elif sign=='*':
            self.val=self.val1*self.val2
            return self.val
        else:
            self.val=self.val1/self.val2
            return self.val

            # print(self.val1,self.sign,self.val2,'=',val)

        # val=self.val1*self.val2

        # return val
        # if self.sign=='+':
        #     result=self.val1+self.val2
        # print(self.val1,self.sign,self.val2,'=',result)
    def showCalculation(self):
        # self.val=''
        print(f'{self.val1}{self.sign}{self.val2}={self.val}')
        # print(self.val1,self.sign,self.val2,'=',self.val)



c1 = Calculator()
print("==================")
val = c1.calculate(10, 20, '+')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 10, '-')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 5, '*')
print("Returned value:", val)
c1.showCalculation()
print("==================")
val = c1.calculate(val, 16, '/')
print("Returned value:", val)
c1.showCalculation()

#task-4:
class Programmer:
    def __init__(self, name, lang,num):
       print('Horray! A new programmer is born')
       self.name=name
       self.lang=lang
       self.num=num
    
    def printDetails(self):
        self.val=''
        print(f'Name: {self.name}\nLanguage {self.lang}\nExperience {self.num} years')
    def addExp(self,num):
        self.num=num+self.num


#driver code:
p1 = Programmer("Ethen Hunt", "Java", 10)
p1.printDetails()
print('--------------------------')
p2 = Programmer("James Bond", "C++", 7)
p2.printDetails()
print('--------------------------')
p3 = Programmer("Jon Snow", "Python", 4)
p3.printDetails()
p3.addExp(5)
p3.printDetails()

#task-5:
class UberEats:
    def __init__(self,name,num,address):
        self.name=name
        self.num=num
        self.add=address
        print(f'{self.name} welcome to UberEats')
    
    def add_items(self,fast_food, cold_drink,num1,num2):
        self.fast_food=fast_food
        self.cold_drink=cold_drink
        self.num1=num1
        self.num2=num2
        
    def print_order_detail(self):
        a_dict={self.fast_food:self.num1, self.cold_drink: self.num2}
        sum=self.num1+self.num2
        self.val=''
        return f'User details: Name:{self.name}, Phone: {self.num}, Address: {self.add}\nOrders: {a_dict} \nTotal Paid Amount: {sum}'


#Driver code:
order1 = UberEats("Shakib", "01719658xxx", "Mohakhali")
print("=========================")
order1.add_items("Burger", "Coca Cola", 220, 50)
print("=========================")
print(order1.print_order_detail())
print("=========================")
order2 = UberEats ("Siam", "01719659xxx", "Uttara")
print("=========================")
order2.add_items("Pineapple", "Dairy Milk", 80, 70)
print("=========================")
print(order2.print_order_detail())      #This works like return

#task-6:
class Customer:
    def __init__(self,name):
        self.name=name
        print('Hello!')

    def greet(self,*args):
        self.val=''
    def purchase(self,*args):
        self.args=args
        print(f'{self.name},you purchased {len(args)} item(s):')
        for i in args:
            print(i)

#driver code:
customer_1 = Customer("Sam")
customer_1.greet()
customer_1.purchase("chips", "chocolate", "orange juice")
print("-----------------------------")
customer_2 = Customer("David")
customer_2.greet("David")
customer_2.purchase("orange juice")

#task-7:
class Cat:
    def __init__(self,color='White',action='Sitting'):
        self.color=color
        self.action=action
    def printCat(self):
        self.val=''
        print(f'{self.color} cat is {self.action}')
    def changeColor(self,color):
         self.color=color
         
#Driver Code:
c1 = Cat()
c2 = Cat("Black")
c3 = Cat("Brown", "jumping")
c4 = Cat("Red", "purring")
c1.printCat()
c2.printCat()
c3.printCat()
c4.printCat()
c1.changeColor("Blue")
c3.changeColor("Purple")
c1.printCat()
c3.printCat()

#task-8:
class Student:
    def __init__(self,name,num,dept='CSE'):
        self.name=name
        self.num=num
        self.dept=dept
    def dailyEffort(self,num1):
        self.num1=num1
    def printDetails(self):
        if self.name=='Harry Potter':
            print(f'Name: {self.name} \nID: {self.num} \nDepartment: {self.dept} \nDaily Effort: {self.num1} hour(s)')
            print('Suggestion: Keep up the good work')
        elif self.name=='John Wick':
            print(f'Name: {self.name} \nID: {self.num} \nDepartment{self.dept} \nDaily Effort: {self.num1} hour(s)')
            print('Should give more effort!')
        else:
            print(f'Name: {self.name} \nID: {self.num} \nDepartment{self.dept} \nDaily Effort: {self.num1} hour(s)')
            print('Excellent! Now motivate others')

 

#Driver code:
harry = Student('Harry Potter', 123)
harry.dailyEffort(3)
harry.printDetails()	
print('========================')
john = Student("John Wick", 456, "BBA")
john.dailyEffort(2)
john.printDetails()
print('========================')
naruto = Student("Naruto Uzumaki", 777, "Ninja")
naruto.dailyEffort(6)
naruto.printDetails()

#task-9:
class Batsman:
    def __init__(self,*args):
        if len(args)==2:
            self.name='New Batsman'
            self.num1=args[0]
            self.num2=args[1]
        elif len(args)==3:
            self.num1=args[1]
            self.num2=args[2]
            self.name=args[0]
    def printCareerStatistics(self):
        if self.name=='New Batsman':
            print(f'Name: {self.name} \nRuns Scored: {self.num1}, Balls Faced: {self.num2}')
        else:
            print(f'Name: {self.name} \nRuns Scored: {self.num1}, Balls Faced: {self.num2}')
    def battingStrikeRate(self):
        rate=(self.num1/self.num2)*100
        return rate
    def setName(self,name):
        self.name=name

#Driver Code:
b1 = Batsman(6101, 7380)
b1.printCareerStatistics()
print("============================")
b2 = Batsman("Liton Das", 678, 773)
b2.printCareerStatistics()
print("----------------------------")
print(b2.battingStrikeRate())
print("============================")
b1.setName("Shakib Al Hasan")
b1.printCareerStatistics()
print("----------------------------")
print(b1.battingStrikeRate())

#task-10:
class Author:
    def __init__(self,name='Default',*args):
        self.name=name
        # if len(args)==0:
        #     self.name='Default'
        if len(args)==1:
            self.name==args[0]
        elif len(args)==2:
            self.name==args[0]
        elif len(args)==3:
            self.name==args[0]
        print(f'Author Name: {self.name}')
        print('--------')
    def addBooks(self,*bk_list):
        self.bk_list=bk_list

    def printDetails(self):
        self.val=''
        if len(self.bk_list)==2:
            self.b1_name=self.bk_list[0]
            self.b2_name=self.bk_list[1]
            print(f'List of Books: \n{self.b1_name} \n{self.b2_name}')
        elif len(self.bk_list)==3:
            self.b1_name=self.bk_list[0]
            self.b2_name=self.bk_list[1]
            self.b3_name=self.bk_list[2]
            print(f'List of Books: \n{self.b1_name} \n{self.b2_name} \n{self.b3_name}')

        # print(f'Author Name: {self.name}')

    def changeName(self,new_name):
        self.new_name=new_name

        # print(f'Author Name: {self.name}')
        # print('--------')
        # print(f'List of Books: \n{self.b1_name} \n{self.b2_name}')
# Author Name:  Humayun Ahmed
# --------
# List of Books:
# Deyal
# Megher Opor Bari
# ===================
# Default
# ===================
# Author Name:  Mario Puzo
# --------
# List of Books:
# The Godfather
# Omerta
# The Sicilian
# ===================
# Author Name:  Paolo Coelho
# --------
# List of Books:
# The Alchemist
# The Fifth Mountain
    
#Driver Code:
auth1 = Author('Humayun Ahmed')
auth1.addBooks('Deyal', 'Megher Opor Bari')
auth1.printDetails()
print("===================")
auth2 = Author()
print(auth2.name)
auth2.changeName('Mario Puzo')
auth2.addBooks('The Godfather', 'Omerta', 'The Sicilian')
print("===================")
auth2.printDetails()
print("===================")
auth3 = Author('Paolo Coelho', 'The Alchemist', 'The Fifth Mountain')
auth3.printDetails()

#task-11:
class TaxiLagbe:
    def __init__(self,code,dist):
        self.code=code
        self.dist=dist
        self.a_list=[]
        self.b_list=[]
    def addPassenger(self,*args):
        self.args=args
        for i in self.args:
            x,y=i.split('_')
            self.a_list.append(x)
            self.b_list.append(int(y))
            print(f'Dear {x}! Welcome to TaxiLagbe.')
    def printDetails(self):
        x=len(self.a_list)
        print(f'Trip info for Taxi number: {self.code} \nThis taxi can cover only {self.dist} \nTotal passengers: {x} \nPassenger lists:')
        for j in self.a_list:
            lst=[]
            lst.append(j+',')
            print(j,end=',')
            # print(j.join(','))
        print('')
            
        total=0
        for k in self.b_list:
            total+=k
        print(f'Total collected fare: {total}')
      


#Driver code:
taxi1 = TaxiLagbe('1010-01', 'Dhaka')
print('-------------------------------')
taxi1.addPassenger('Walker_100', 'Wood_200')
taxi1.addPassenger('Matt_100')
taxi1.addPassenger('Wilson_105')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi1.addPassenger('Karen_200')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi2 = TaxiLagbe('1010-02', 'Khulna')
taxi2.addPassenger('Ronald_115')
taxi2.addPassenger('Parker_215')
print('-------------------------------')
taxi2.printDetails()

#task-11:
class TaxiLagbe:
    def __init__(self,num,area):
        self.num=num
        self.area=area
        self.a_list=[]
        self.b_list=[]
        self.dict1={}
    def addPassenger(self,*name):
        self.name=name
        for i in self.name:    
            x,y=i.split('_')
            self.a_list.append(x)
            self.b_list.append(y)
            print(f'Dear {x}! Welcome to TaxiLagbe.')
    def printDetails(self):
        z=len(self.a_list)
        sum=0
        print(f'Trip info for Taxi number: {self.num} \nThis taxi can cover only {self.area} area')
        print(f'Total passengers: {z} \nPassenger lists:')
        for j in self.a_list:
            print(str(j), end=',')
        for k in self.b_list:
            sum+=int(k)
        print()
        print(f'Total collected fare: {sum} tk')

#driver code:
taxi1 = TaxiLagbe('1010-01', 'Dhaka')
print('-------------------------------')
taxi1.addPassenger('Walker_100', 'Wood_200')
taxi1.addPassenger('Matt_100')
taxi1.addPassenger('Wilson_105')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi1.addPassenger('Karen_200')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi2 = TaxiLagbe('1010-02', 'Khulna')
taxi2.addPassenger('Ronald_115')
taxi2.addPassenger('Parker_215')
print('-------------------------------')
taxi2.printDetails()

#task-12:
class Account:
    def __init__(self,name='Default',balance=0.0):
        self.name=name
        self.balance=balance
    def details(self):
        self.val=''
        return f'{self.name} account \n{self.balance}'

    def withdraw(self, amount):
        self.amount=amount
        if self.balance>self.amount:
            self.balance=self.balance-self.amount
            print( f'{self.name} account \n{self.balance}')
        elif self.balance==None:
            print(f'Sorry, Withdraw unsuccessful....')
        else:
            print(f'Sorry, Withdraw unsuccessful! The account balance after deducting withdraw amount is equal to or less than minimum.')


a1 = Account()
print(a1.details())
print("------------------------")
a1.name = "Oliver"
a1.balance = 10000.0
print(a1.details())
print("------------------------")
a2 = Account("Liam")
print(a2.details())
print("------------------------")
a3 = Account("Noah",400)
print(a3.details())
print("------------------------")
a3.withdraw(6930)
print("------------------------")
a2.withdraw(600)
print("------------------------")
a1.withdraw(6929)

#task-13:
class StudentDatabase:
    def __init__(self,name,id):
        self.name=name
        self.id=id
        self.grades={}
    def calculateGPA(self,course, semester):
        self.course=course
        self.semester=semester
        self.a_list=[]
        self.b_list=[]
        self.c_list=[]
        self.a_dict={}
        gpa=0
        for i in self.course: 
            x,y=i.split(':')   
            self.a_list.append(x)
            self.b_list.append(y)
            gpa+=float(y)
        self.a_dict[tuple(self.a_list)]=gpa/len(self.course)
        self.grades[self.semester]=self.a_dict        
    def printDetails(self):    
        print(f'Name: {self.name} \nID: {self.id}')  
        for j,k in self.grades.items():
            print(f'Courses taken in', j, ':')
            for l,m in k.items():
                for n in l:
                    print(n)   
            # print('GPA',k[l]) 
            
            print('GPA: ',m)

s1 = StudentDatabase('Pietro', '10101222')
s1.calculateGPA(['CSE230: 4.0', 'CSE220: 4.0', 'MAT110: 4.0'],
'Summer2020')
s1.calculateGPA(['CSE250: 3.7', 'CSE330: 4.0'], 'Summer2021')
print(f'Grades for {s1.name}\n{s1.grades}')
print('------------------------------------------------------')
s1.printDetails()
s2 = StudentDatabase('Wanda', '10103332')
s2.calculateGPA(['CSE111: 3.7', 'CSE260: 3.7', 'ENG101: 4.0'],
'Summer2022')
print('------------------------------------------------------')
print(f'Grades for {s2.name}\n{s2.grades}')
print('------------------------------------------------------')
s2.printDetails()

#task-14:
class Test3:
    def __init__(self):
        self.sum, self.y = 0, 0
    def methodA(self):
        x, y = 2, 3
        msg = [0]
        msg[0] = 3
        y = self.y + msg[0]
        self.methodB(msg, msg[0])
        x = self.y + msg[0]
        self.sum = x + y + msg[0]
        print(x, y, self.sum)
    def methodB(self, mg2, mg1):
        x = 0
        self.y = self.y + mg2[0]
        x = x + 33 + mg1
        self.sum = self.sum + x + self.y
        mg2[0] = self.y + mg1
        mg1 = mg1 + x + 2
        print(x, self.y, self.sum)

t3 = Test3()
t3.methodA()
t3.methodA()
t3.methodA()
t3.methodA()

#task-15:
class Test5:
    def __init__(self):
        self.sum, self.y = 0, 0
    def methodA(self):
        x = 0
        z = 0
        while (z < 5):
            self.y = self.y + self.sum
            x = self.y + 1
            print(x, self.y, self.sum)
            self.sum = self.sum + self.methodB(x, self.y)
            z += 1
    def methodB(self, m, n):
        x = 0
        sum = 0
        self.y = self.y + m
        x = n - 4
        sum = sum + self.y
        print(x, self.y, sum)
        return self.sum

t5 = Test5()
t5.methodA()

#task-16:
class FinalT6A:
    def __init__(self, x, p):
        self.temp, self.sum, self.y = 4, 0, 1
        self.temp += 1
        self.y = self.temp - p
        self.sum = self.temp + x
        print(x, self.y, self.sum)
    def methodA(self):
       x = 0
       y = 0
       y = y + self.y
       x = self.y + 2 + self.temp
       self.sum = x + y + self.methodB(self.temp, y)
       print(x, y, self.sum)
    def methodB(self, temp, n):
       x = 0
       temp += 1
       self.y = self.y + temp
       x = x + 3 + n
       self.sum = self.sum + x + self.y
       print(x, self.y, self.sum)
       return self.sum
    
q1 = FinalT6A(2,1)
q1.methodA()
q1.methodA()

#task-17:
class Test5:
     def __init__(self):
         self.sum = 0
         self.y = 0
     def methodA(self):
         x=y=k=0
         msg = [5]
         while (k < 2):
             y += msg[0]
             x = y + self.methodB(msg, k)
             self.sum = x + y + msg[0]
             print(x ," " , y, " " , self.sum)
             k+=1
     def methodB(self, mg2, mg1):
         x = 0
         self.y += mg2[0]
         x = x + 3 + mg1
         self.sum += x + self.y
         mg2[0] = self.y + mg1
         mg1 += x + 2
         print(x , " " ,self.y, " " , self.sum)
         return mg1
t1 = Test5()
t1.methodA()
t1.methodA()
t1.methodA()

#task-18:
class Test4:
    def __init__(self):
        self.sum, self.y = 0, 0
    def methodA(self):
        x, y = 0, 0
        msg = [0]
        msg[0] = 5
        y = y + self.methodB(msg[0])
        x = y + self.methodB(msg, msg[0])
        self.sum = x + y + msg[0]
        print(x, y, self.sum)
    def methodB(self, *args):
        if len(args) == 1:
            mg1 = args[0]
            x, y = 0, 0
            y = y + mg1
            x = x + 33 + mg1
            self.sum = self.sum + x + y
            self.y = mg1 + x + 2
            print(x, y, self.sum)
            return y
        else:
            mg2, mg1 = args
            x = 0
            self.y = self.y + mg2[0]
            x = x + 33 + mg1
            self.sum = self.sum + x + self.y
            mg2[0] = self.y + mg1
            mg1 = mg1 + x + 2
            print(x, self.y, self.sum)
            return self.sum

t3 = Test4()
t3.methodA()
t3.methodA()
t3.methodA()
t3.methodA()

#task-19:
class msgClass:
    def __init__(self):
        self.content = 0
class Q5:
    def __init__(self):
        self.sum = 1
        self.x = 2
        self.y = 3      
    def methodA(self):
        x, y = 1, 1
        msg = []
        myMsg = msgClass()
        myMsg.content = self.x
        msg.append(myMsg)
        msg[0].content = self.y + myMsg.content
        self.y = self.y + self.methodB(msg[0])
        y = self.methodB(msg[0]) + self.y
        x = y + self.methodB(msg[0], msg)
        self.sum = x + y + msg[0].content
        print(x," ", y," ", self.sum)
    def methodB(self, mg1, mg2 = None):
        if mg2 == None:
            x, y = 5, 6
            y = self.sum + mg1.content
            self.y = y + mg1.content
            x = self.x + 7 +mg1.content
            self.sum = self.sum + x + y
            self.x = mg1.content + x +8
            print(x, " ", y," ", self.sum)
            return y
        else:
            x = 1
            self.y += mg2[0].content
            mg2[0].content = self.y + mg1.content
            x = x + 4 + mg1.content
            self.sum += x + self.y
            mg1.content = self.sum - mg2[0].content
            print(self.x, " ",self.y," ", self.sum)
            return self.sum

q = Q5()
q.methodA()

#Extra Super tracing:
class msgClass:
    def __init__(self):
        self.content = 0 
class Q5:
    def __init__(self,z):
        self.sum = 1
        self.x = 2
        self.y = 3 
        self.z = z
    def methodA(self):
        x, y = 1, 1
        msg = []
        myMsg = msgClass()
        myMsg.content = self.x
        msg.append(myMsg)
        msg[0].content = self.y + myMsg.content
        self.y = self.y + self.methodB(self.z, msg[0])##
        y = self.methodB(self.z, msg[0]) + self.y
        x = y + self.methodB(self.z, msg[0], msg)
        self.sum = x + y + msg[0].content
        print(x," ", y," ", self.sum," ",self.z[0]) 

    def methodB(self, mg0, mg1, mg2 = None):
        if mg2 == None:
            x, y = 5, 6
            y = self.sum + mg1.content
            self.y = y + mg1.content
            x = self.x + 7 +mg1.content
            self.sum = self.sum + x + y
            self.x = mg1.content + x +8
            mg0[0]+=2
            print(x, " ", y," ", self.sum)
            return y
        else:
            x = 1
            self.y += mg2[0].content
            mg2[0].content = self.y + mg1.content
            x = x + 4 + mg1.content
            self.sum += x + self.y
            mg1.content = self.sum - mg2[0].content
            print(self.x, " ",self.y," ", self.sum)
            return self.sum

q = Q5([5])
q.methodA()

#Quiz and Important tracing:
class MidA:
    def __init__(self):
        self.x=5
        self.sum=0
    def methodA(self,x):
        self.x=x
        self.y=x+self.sum+self.x
        self.sum=x+self.y
        z=MidA()
        z.sum=self.sum+self.y
        self.methodB(x)
        print(self.x,self.y,self.sum)
    def methodB(self,a):
        y=4
        a.x =self.x+self.sum
        self.sum=a.x+a.y+y
        print(a.x,a.y,a.sum)

a=MidA()
a.methodA(6)

#tracing important(Double class call)
class QuizA:
    def __init__(self):
        self.x=2
        self.y=3
        self.sum=0
        self.c=1
    def methodA(self,x):
        self.y=x-self.sum+self.c
        self.c+=1
        self.sum=x+self.sum
        print(self.x,self.y,self.sum)

    def methodB(self,a):
        y=3
        a.sum=self.x+self.sum
        self.sum=a.x-self.c
        print(self.x,self.c,self.sum)

a=QuizA()
b=QuizA()
a.methodB(b)
b.methodA(b.sum)
b.methodA(a.y)

"""Ungraded Ones:"""

#task-20:
class Student:
    def __init__(self,name=None,dept=None):
        self.name=name
        self.dept=dept
        self.dict1={}
        # self.args=args
        if name==None:
            print(f'Student name and department need to be set')
        elif dept==None:
            print(f'Department for {self.name} needs to be set')
        else:
            print(f'{self.name} is from {self.dept} department')
    def update_name(self,name):
        self.name=name
    def update_department(self,dept):
        self.dept=dept
    def enroll(self,*course):
        self.course=course
    def printDetail(self):
        x=len(self.course)
        y=str(self.course)
        print(f'Name: {self.name} \nDepartment: {self.dept} \n{self.name} enrolled in {x} course(s)')
        if x>1:
            print(y[1:-1:1])
        else:
            print(y[1:-2:1])
        # for i in self.course:
        # y=self.course.replace()  
        # print(y)


s1 = Student()
print("=========================")
s2 = Student("Carol")
print("=========================")
s3 = Student("Jon", "EEE")
print("=========================")
s1.update_name("Bob")
s1.update_department("CSE")
s2.update_department("BBA")
s1.enroll("CSE110", "MAT110", "ENG091")
s2.enroll("BUS101")
s3.enroll("MAT110", "PHY111")
print("###########################")
s1.printDetail()
print("=========================")
s2.printDetail()
print("=========================")
s3.printDetail()

a='ABCDE'
print(a[1:-1:2])

#task-21:
class Student:
    def __init__(self,name,id,dept):
        self.name=name
        self.id=id
        self.dept=dept
    def details(self):
        return f'Name: {self.name} \nID: {self.id} \nDepartment: {self.dept}'
    def advise(self,*course):
        self.course=course
        x=len(self.course)
        print(f'{self.name},you have taken {x} credits')
        print(f'List of courses: {self.course}')
        if x==3:
            print(f'Status: OK')
        elif x<3:
            print(f'Status: You have to take at least 1 more course.')
        else:
            print('You have to drop at least 1 course')



s1 = Student('Alice','20103012','CSE')
s2 = Student('Bob', '18301254','EEE')
s3 = Student('Carol', '17101238','CSE')
print('##########################')
print(s1.details())
print('##########################')
print(s2.details())
print('##########################')
s1.advise('CSE110', 'MAT110', 'PHY111')
print('##########################')
s2.advise('BUS101', 'MAT120')
print('##########################')
s3.advise('MAT110', 'PHY111', 'ENG102',
'CSE111', 'CSE230')

#task-22:
class Hotel:
    def __init__(self,place):
        self.place=place
    def addStuff(self,name,age):
        self.name=name
        self.age=age
        print(f'Staff With ID {self.id} is added')
        
    def getStuffById(self,id):
        self.id=id
        phn='000'
        # print(f'Staff With ID {self.id} is added')        
        return f'Staff ID: {self.id} \nName: {self.name} \nAge: {self.age} \nPhone no: {phn}'

    # def addGuest(self,name1,age,phn='000'):
    #     self.name1=name1
    #     self.age=age
    #     self.phn=phn
    #     # print(f'Staff ID: {self.num} \nName: {self.name} \nAge: {self.age} \nPhone no: {self.phn}')
    # def getGuestById(self,num2):
    #     self.num2=num2


h = Hotel("Lakeshore")
h.addStuff( "Adam", 26)
print("=================================")
print(h.getStuffById(1))
print("=================================")
# h.addGuest('Carol',35,'123')
# print("=================================")
# print(h.getGuestById(1))
# print("=================================")
# h.addGuest("Diana", 32, '431')
# print("=================================")
# print(h.getGuestById(2))
# print("=================================")
# h.allStaffs()
# print("=================================")
# h.allGuest()

#Quiz question:
class QuizA:
      def __init__(self):
          self.x = 5
          self.y = 4
          self.sum = 0
          self.c = 5
   
      def methodA(self, x):
          self.y = x + self.sum + self.c
          self.c -= 1
          self.sum = x + self.y
          print(self.x, self.y, self.sum)
   
      def methodB(self, a):
          y = 3
          a.sum = self.x - self.sum
          self.sum = a.x + self.c
          print(self.x, self.c, self.sum)
a = QuizA()
b = QuizA()
a.methodB(b)
b.methodA(b.sum)
b.methodA(a.y)

#Quiz question:
class QuizA:
      def __init__(self):
          self.x = 6
          self.y = 3
          self.sum = 2
          self.c = 7
   
      def methodA(self, x):
          self.y = x - self.sum + self.c
          self.c -= 1
          self.sum = x + self.y
          print(self.x, self.y, self.sum)
   
      def methodB(self, a):
          y = 5
          a.sum = self.x - self.sum
          self.sum = a.x + self.c
          print(self.x, self.c, self.sum)
a = QuizA()
b = QuizA()
a.methodB(b)
b.methodA(b.sum)
b.methodA(a.y)

#task-24:
class Hospital:
  def __init__(self, title):
    self.title = title
    self.doctors = {}
    self.patients = {}
    self.list1=[]
  def addDoctor(self, doctor):
    self.doctors[doctor.id] = [doctor.name, doctor.sp]
  def addPatient(self, patient):
    self.patients[patient.id] = [patient.name, patient.age, patient.ph]
  def getDoctorByID(self, id):
    return f"Doctor's ID: {id}\nName: {self.doctors[id][0]}\nSpeciality: {self.doctors[id][1]}"
    
  def getPatientByID(self, id):
    return f"Patient's ID: {id}\nName: {self.patients[id][0]}\nAge: {self.patients[id][1]}\nPhone: {self.patients[id][2]}"
  def allDoctors(self):
    print("All doctors:")
    print("Number of doctors:",len(self.doctors))
    print(self.doctors)
  def allPatients(self):
    print("All patients")
    print("Number of patients:",len(self.patients))
    print(self.patients)
class Doctor:
  def __init__(self, id, des, name, sp):
    self.id = id
    self.name = name
    self.sp = sp
class Patient:
  def __init__(self, id, des, name, age, ph):
    self.id = id
    self.name = name
    self.age = age
    self.ph = ph 

#Driver Code:
h = Hospital("Evercare")
d1 = Doctor("1d","Doctor", "Samar Kumar", "Neurologist")
h.addDoctor(d1)
print("=================================")
print(h.getDoctorByID("1d"))
print("=================================")
p1 = Patient("1p","Patient", "Kashem Ahmed", 35, 12345)
h.addPatient(p1)
print("=================================")
print(h.getPatientByID("1p"))
print("=================================")
p2 = Patient ("2p","Patient", "Tanina Haque", 26, 33456)
h.addPatient(p2)
print("=================================")
print(h.getPatientByID("2p"))
print("=================================")
h.allDoctors()
h.allPatients()

#task-23:
class Author:
    def __init__(self,name=None):
        self.name=name
        
    def addBook(self,ice,science):
        self.ice=ice
        self.science=science
        
        if self.name==None:
            print('A book can be added without any author name')
        print(self.ice)
    def setName(self,name):
        self.name=name
    def printDetail(self):
        book=0
        book+=len(self.ice)
        print(f'Number of Book(s): {book} \nAuthor Name: {self.name} \n{self.science}: {self.ice}')


a1 = Author()
print("=================================")
a1.addBook('Ice', 'Science Fiction')
print("=================================")
a1.setName('Anna Kavan')
a1.addBook('Ice', 'Science Fiction')
a1.printDetail()
print("=================================")
a2 = Author('Humayun Ahmed')
a2.addBook('Onnobhubon', 'Science Fiction')
a2.addBook('Megher Upor Bari', 'Horror')
print("=================================")
a2.printDetail()
a2.addBook('Ireena', 'Science Fiction')
print("=================================")
a2.printDetail()
print("=================================")

#Extra mid questions:
class Exam:
    def __init__(self,xm,num_q,marks):
        self.xm=xm
        self.num_q=num_q
        self.marks=marks
    def detail(self):
        total=self.num_q*self.marks
        return f'Exam Type: {self.xm} \nNumber of questions: {self.num_q} \nMarks per question: {self.marks} \nTotal Marks: {total}'

e1=Exam('Midterm',2,10)
print(e1.detail())
print('=================')
e2=Exam('Final',3,10)
print(e2.detail())

#task-24:
class Hospital:
    def __init__(self,title):
        self.title=title
        self.doctors={}
        self.patients={}
        self.list1=[]
    def addDoctor(self,pin):
        self.pin=pin
    def getDoctorByID(self,id):
        self.id=id
        return f'Doctors ID: {self.id} \nName: {Doctor.name} \nSpeciality: {Doctor.sp}'
    def getPatientByID(self,pin):
        self.pin=pin
    def addPatient(self,num):
        self.num=num
    # def allDoctors(self):
    #     self.val=''
    # def allPatients(self):
    #     self.val=''


class Doctor:
    def __init__(self,id,desig,name,sp):
        self.id=id
        self.desig=desig
        self.name=name
        self.sp=sp
        # print(f'Doctors ID: {self.docid} \nName: {self.name1} \nSpeciality: {self.desig}') 


class Patient:
    def __init__(self,id,desig,name,age,phn):
        self.id=id
        self.desig=desig
        self.name=name
        self.age=age
        self.phn=phn
        # print(f'Patients ID: {self.id} \nName: {self.name2} \nAge: {self.age} \nPhone no: {self.phn}')

#Driver Code:
h = Hospital("Evercare")
d1 = Doctor("1d","Doctor", "Samar Kumar", "Neurologist")
h.addDoctor(d1)
print("=================================")
print(h.getDoctorByID("1d"))
print("=================================")
p1 = Patient("1p","Patient", "Kashem Ahmed", 35, 12345)
h.addPatient(p1)
print("=================================")
print(h.getPatientByID("1p"))
print("=================================")
p2 = Patient ("2p","Patient", "Tanina Haque", 26, 33456)
h.addPatient(p2)
print("=================================")
print(h.getPatientByID("2p"))
print("=================================")
# h.allDoctors()
# h.allPatients()

#task-25:
class Vaccine:
    def __init__(self,vac,country,days):
        self.vac=vac
        self.country=country
        self.days=days
class Person:
    def __init__(self,name,age,catg):
        self.name=name
        self.age=age
        self.catg=catg
    def pushVaccine(self,vac1,dose=None):
        self.vac1=vac1
        self.dose=dose
        if self.dose==None:
            print(f'1st dose done for {vac1}')
        elif self.dose!=None:
            print(f'Sorry {self.name}, you cant take 2 different vaccines')
    def showDetail(self):
        print(f'Name: {self.name} Age: {self.age} Type: {self.catg}')
        # if self.vac=='astra':
        #     x='Given'
        #     print(f'vaccine name: {self.vac} \n1st dose: {x}')
        # else:
        #     pass
        # print(f'')


astra = Vaccine("AstraZeneca", "UK", 60)
modr = Vaccine("Moderna", "UK", 30)
sin = Vaccine("Sinopharm", "China", 30)
p1 = Person("Bob", 21, "Student")
print("=================================")
p1.pushVaccine(astra)
print("=================================")
p1.showDetail()
print("=================================")
p1.pushVaccine(sin, "2nd Dose")
print("=================================")
p1.pushVaccine(astra, "2nd Dose")
print("=================================")
p1.showDetail()
print("=================================")
# p2 = Person("Carol", 23, "Actor")
# print("=================================")
# p2.pushVaccine(sin)
# print("=================================")
# p3 = Person("David", 34)
# print("=================================")
# p3.pushVaccine(modr)
# print("=================================")
# p3.showDetail()
# print("=================================")
# p3.pushVaccine(modr, "2nd Dose")

x=int(input())
for i in range(x):
    l=input()
    m=input()
    n=input()
    print(l,m,n)

a=int(input())
b=int(input())
c= a + b
print(c)

# t=int(input())
inp=int(input())
a_list=[]
b_list=[]
for i in range(inp):
    n=input()
    a_list.append(int(n))
    print(a_list)
    # for j in a_list:
    #     x=input()
    #     if x==j or x==-j:
    #         x=str(j).replace(str(j),'')
    #         b_list.append(j)
for j in a_list:
    x=input()
    if x==j or x==-j:
        y=j.remove(x)
        b_list.append(j)
print(b_list)
# for k in b_list:
#     sum+=int(k)
#     print(k)

t = int(input())
exp = []
res = []
for i in range(t):
    size = int(input())
    elem = list(map(int, input().split()))
    for j in elem:
        if j in exp:
            exp.remove(j)
            exp.append(j)
        elif abs(j) in exp:
            exp.remove(abs(j))
            exp.append(j)
        else:
            exp.append(j)

dum = sum(exp)
for m in range(t):
    print("Case",m+1,":",dum)