# -*- coding: utf-8 -*-
"""CSE111 Assignment02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pJ4GarvDMRCezuCQsNtiEEdbWFNoZM7Q
"""

inp='Hello, this is Tasrif Coding'
print(inp)

"""Self just makes the code global to use. Also, init is a constructor here and class is the blueprint or design."""

#task-1:
class DataType:
    def __init__(self,name, value):
        self.name=name
        self.value=value



#Write your class code here
data_type1 = DataType('Integer', 1234)
print(data_type1.name)
print(data_type1.value)
print('=====================')
data_type2 = DataType('String', 'Hello')
print(data_type2.name)
print(data_type2.value)
print('=====================')
data_type3 = DataType('Float', 4.0)
print(data_type3.name)
print(data_type3.value)

#task-2:
class Flower: 
    def __init__(self):
        self.name=''
        self.color=''
        self.num_of_petal=''


#Write your class code here
flower1 = Flower()
flower1.name="Rose"
flower1.color="Red"
flower1.num_of_petal=6
print("Name of this flower:", flower1.name)
print("Color of this flower:",flower1.color)
print("Number of petal:",flower1.num_of_petal)
print("=====================")
flower2 = Flower()
flower2.name="Orchid"
flower2.color="Purple"
flower2.num_of_petal=4
print("Name of this flower:",flower2.name)
print("Color of this flower:",flower2.color)
print ("Number of petal:",flower2. num_of_petal)

#Subtask
print(flower1)
print(flower2)
print('they are different')

#task-3:
class Joker:
    def __init__(self, name, power, is_he_psycho):
        self.name=name
        self.power=power
        self.is_he_psycho=is_he_psycho


#Write your class code here
j1 = Joker('Heath Ledger', 'Mind Game', False)
print(j1.name)
print(j1.power)
print(j1.is_he_psycho)
print('=====================')
j2 = Joker('Joaquin Phoenix', 'Laughing out Loud', True)
print(j2.name)
print(j2.power)
print(j2.is_he_psycho)
print('=====================')
if j1 == j2:    #j1 & j2 are two different variables with different values
 print('same')
else:
 print('different')
j2.name = 'Heath Ledger'
if j1.name == j2.name:    #j1 & j2 has same values inside here
 print('same')
else:
 print('different')

#task-4:
class Pokemon:
    def __init__(self,pokemon1_name,pokemon2_name, pokemon1_power, pokemon2_power, damage_rate):
        self.pokemon1_name= pokemon1_name
        self.pokemon1_power= pokemon1_power
        self.pokemon2_name= pokemon2_name
        self.pokemon2_power= pokemon2_power
        self.damage_rate=damage_rate

#Write your code for class here
team_pika = Pokemon('pikachu', 'charmander', 90, 60, 10)
print('=======Team 1=======')
print('Pokemon 1:',team_pika.pokemon1_name, team_pika.pokemon1_power)
print('Pokemon 2:',team_pika.pokemon2_name,team_pika.pokemon2_power)
pika_combined_power = (team_pika.pokemon1_power + team_pika.pokemon2_power) * team_pika.damage_rate
print('Combined Power:', pika_combined_power)

#Subtask
team_bulb=Pokemon('bulbasaur', 'squirtle', 80, 70,9)
print('=======Team 2=======')
print('Pokemon 1:',team_pika.pokemon1_name, team_pika.pokemon1_power)
print('Pokemon 2:',team_pika.pokemon2_name,team_pika.pokemon2_power)
pika_combined_power = (team_pika.pokemon1_power + team_pika.pokemon2_power) * team_pika.damage_rate
print('Combined Power:', pika_combined_power)

#task-5:
class Player:
    def __init__(self):
        self.name=''
        self.jersey_number=''
        self.position=''
    # name='name'
    # jersey_number='number'
    # position='position'

# Write Your Class Code Here
player1 = Player()
player1.name = "Ronaldo"
player1.jersy_number = 9
player1.position = "Striker"
print("Name of the Player:", player1.name)
print("Jersey Number of player:", player1.jersy_number)
print("Position of player:", player1.position)
print('===========================')
player2 = Player()
player2.name = "Neuer"
player2.jersy_number = 1
player2.position = "Goal Keeper"
print("Name of the player:", player2.name)
print("Jersey Number of player:", player2.jersy_number)
print("Position of player:", player2.position)

#task-6:
class Country:
    def __init__(self):
        self.name='Bangladesh'
        self.continent='Asia'
        self.capital='Dhaka'
        self.fifa_ranking=187


# Write your Class Code here
country = Country()
print('Name:',country.name)
print('Continent:',country.continent)
print('Capital:',country.capital)
print('Fifa Ranking:',country.fifa_ranking)
print('===================')
country.name = 'Belgium'
country.continent = 'Europe'
country.capital = 'Brussels'
country.fifa_ranking = 1
print('Name:',country.name)
print('Continent:',country.continent)
print('Capital:',country.capital)
print('Fifa Ranking:',country.fifa_ranking)

#task-7:
class  DemonSlayer:
    def __init__(self,name,style,number_of_technique,kill):
     self.name=name
     self.style=style
     self.number_of_technique=number_of_technique
     self.kill=kill

     
#Driver_Code:
tanjiro = DemonSlayer("Tanjiro", "Water Breathing", 10, 10)
print('Name:',tanjiro.name)
print('Fighting Style:',tanjiro.style)
print(f'Knows {tanjiro.number_of_technique} technique(s) and has killed {tanjiro.kill} demon(s)')
print('===================')
zenitsu = DemonSlayer("Zenitsu", "Thunder Breathing", 1, 4)
print('Name:',zenitsu.name)
print('Fighting Style:',zenitsu.style)
print(f'Knows {zenitsu.number_of_technique} technique(s) and has killed {zenitsu.kill} demon(s)')
print('===================')
inosuke = DemonSlayer("Inosuke", "Beast Breathing", 5, 7)
print('Name:',inosuke.name)
print('Fighting Style:',inosuke.style)
print(f'Knows {inosuke.number_of_technique} technique(s) and has killed {inosuke.kill} demon(s)')
print('===================')
print(f'{tanjiro.name}, {zenitsu.name}, {inosuke.name} knows total {tanjiro.number_of_technique + zenitsu.number_of_technique + inosuke.number_of_technique} techniques')
print(f'They have killed total {tanjiro.kill + zenitsu.kill + inosuke.kill} demons')

#task-8:
class  box:
  def __init__(self,a_list):
    self.height=a_list[0]
    self.width=a_list[1]
    self.breadth=a_list[2]
    volume= self.height*self.width*self.breadth
    print("Creating a Box!")
    print("Volume of the box is",volume,"cubic units.")

print("Box 1")
b1 = box([10,10,10])
print("=========================")
print("Height:", b1.height)
print("Width:", b1.width)
print("Breadth:", b1.breadth)
print("-------------------------")
print("Box 2")
b2 = box((30,10,10))
print("=========================")
print("Height:", b2.height)
print("Width:", b2.width)
print("Breadth:", b2.breadth)
b2.height = 300
print("Updating Box 2!")
print("Height:", b2.height)
print("Width:", b2.width)
print("Breadth:", b2.breadth)
print("-------------------------")
print("Box 3")
b3 = b2
print("Height:", b3.height)
print("Width:", b3.width)
print("Breadth:", b3.breadth)

#task-9:
# class buttons:
#     def __init__(self,word,spaces,border):
#         self.word=word
#         self.spaces=spaces
#         self.border=border

class buttons:
    def __init__(self,word_x,space_x,border_x):
      self.word = word_x
      self.space = space_x
      self.border = border_x
      result_x = (self.border*(self.space+1))+(self.border*len(self.word))+(self.border*(self.space+1))
      mid_x = self.border+(" "*self.space)+self.word+(" "*self.space)+self.border
      length_x=len(mid_x)
      print(self.word,"Button Specifications:")
      print("Button name:",self.word)
      print("Number of the border characters for the top and the bottom:",length_x)
      print("Number of spaces between the left side border and the first character of the button name:",self.space)
      print("Number of spaces between the right side border and the last character of the button name:",self.space)
      print("Characters representing the borders:",self.border)
      print()
      print(result_x)
      print(mid_x)
      print(result_x)


word = "CANCEL"
spaces = 10
border = 'x'
b1 = buttons(word, spaces, border)
print("=======================================================")
b2 = buttons("Notify",3, '!')
print("=======================================================")
b3 = buttons('SAVE PROGRESS', 5, '$')

word = "CANCEL"
spaces = 10
border = 'x'
b1 = buttons(word, spaces, border)
print("=======================================================")
b2 = buttons("Notify",3, '!')
print("=======================================================")
b3 = buttons('SAVE PROGRESS', 5, '$')

#task-10:
class Wadiya:
    def __init__(self):
         self.name = 'Aladeen'
         self.designation = 'President Prime Minister Admiral General'
         self.num_of_wife = 100
         self.dictator = True

wadiya = Wadiya()
print(wadiya.name)
print(wadiya.designation)
print(wadiya.num_of_wife)
print(wadiya.dictator)
print('=====================')
wadiya=Wadiya()
wadiya.name="Donald Trump"
wadiya.designation="President"
wadiya.num_of_wife=1
wadiya.dictator=False
print(wadiya.name)
print(wadiya.designation)
print(wadiya.num_of_wife)
print(wadiya.dictator)
if 'Aladeen' == wadiya.name:    
 print('Same')
else:
 print('Different')

#task-12:
class Student:
    def __init__(self):
        self.name = None
        self.cgpa = 0.0         
s1 = Student()         
s2 = Student()         
s3 = None         
s1.name = "Student One"         
s1.cgpa = 2.3
s3 = s1
s2.name = "Student Two"
s2.cgpa = s3.cgpa + 1
s3.name = "New Student"
print(s1.name)
print(s2.name)
print(s3.name)
print(s1.cgpa)
print(s2.cgpa)
print(s3.cgpa)
s3 = s2
s1.name = "old student"
s2.name = "older student"
s3.name = "oldest student"
s2.cgpa = s1.cgpa - s3.cgpa + 4.5
print(s1.name)
print(s2.name)
print(s3.name)
print(s1.cgpa)
print(s2.cgpa)
print(s3.cgpa)

#task-11:
class Human: 
     def __init__(self):
         self.age = 0
         self.height = 0.0

h1 = Human()
h2 = Human()
h1.age = 21
h1.height = 5.5
print(h1.age)
print(h1.height)
h2.height = h1.height - 3
print(h2.height)
h2.age = h1.age
h1.age += h1.age
print(h1.age)
h2 = h1
print(h2.age)
print(h2.height)
h1.age += h1.age
h2.height += h2.height
print(h1.age)
print(h1.height)
h2.age += h2.age
h1.age = h2.age
print(h2.age)

#task-13:
class Ninja:
    def __init__(self):
         self.rank = 0
         self.stamina = 0.0

naruto = Ninja()
yellow_flash = Ninja()
naruto.rank = 1
naruto.stamina = 95.0
print(naruto.rank)
print(naruto.stamina)
yellow_flash.stamina = naruto.stamina - 2
print(yellow_flash.stamina)
yellow_flash.rank += (naruto.rank + 1)
print(yellow_flash.rank)
minato = yellow_flash
print(minato.rank)
print(minato.stamina)
naruto.rank = minato.rank - 1
naruto.stamina = yellow_flash.stamina + 3
print(naruto.rank)
print(naruto.stamina)
naruto.rank = -(-naruto.rank)
yellow_flash.stamina = -(-minato.stamina)
print(naruto.rank)
print(minato.stamina)

class Player:
    def __init__(self,name):
        self.name= name
        #print(self.name)
    def playerInfo(self):
         print(self.name)
         return self.name

pl1=Player('Aaron Finch')
pl1.playerInfo()
pl2=Player('Brett Lee')
pl2.playerInfo()

a_dict={}
a_list=[]
limit=int(input('Sir, please enter your desired limit: '))
for i in range(limit):
    word=input('Sir, please enter your desired word: ')
    info=word.split()
    a_list.append(info)
print(a_list)

a_dict={}
limit=int(input('Sir, please enter your desired limit: '))
for name,year,tournament in a_dict.items():
    word=input('Sir, please enter your desired word: ')
    a_dict[name]=year
print(a_dict)